{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","canvasElement","useRef","videoElement","videoConstraints","width","height","useState","count","setCount","isCurling","left","right","onResults","results","canvasCtx","current","getContext","save","clearRect","drawImage","image","drawConnectors","poseLandmarks","POSE_CONNECTIONS","color","lineWidth","drawLandmarks","radius","leftShoulder","rightShoulder","leftElbow","rightElbow","leftWrist","rightWrist","angleLeft","calculateAngle","angleRight","restore","a","b","c","aToB","Math","sqrt","pow","x","y","bToC","aToC","acos","PI","useEffect","pose","Pose","locateFile","file","setOptions","modelComplexity","smoothLandmarks","enableSegmentation","smoothSegmentation","minDetectionConfidence","minTrackingConfidence","navigator","mediaDevices","getUserMedia","video","then","stream","srcObject","onloadedmetadata","Camera","onFrame","send","start","catch","err","console","error","close","className","style","display","justifyContent","alignItems","lexDirection","ref","top","zIndex","position","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8e89a0d4.chunk.js","sourcesContent":["// import React, { useRef, useEffect } from \"react\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Camera } from \"@mediapipe/camera_utils\";\nimport { Pose, POSE_CONNECTIONS } from \"@mediapipe/pose\";\nimport \"@mediapipe/drawing_utils/drawing_utils\";\nimport { drawConnectors, drawLandmarks } from \"@mediapipe/drawing_utils\";\n\nfunction App() {\n  const canvasElement = useRef(null);\n  const videoElement = useRef(null);\n  const videoConstraints = {\n    width: 640,\n    height: 360,\n  };\n  const [count, setCount] = useState(0);\n  const isCurling = useRef({left: false, right: false});\n  \n\n  useEffect(() => {\n    const pose = new Pose({\n      locateFile: (file) => {\n        return `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`;\n      },\n    });\n  \n    pose.setOptions({\n      modelComplexity: 1,\n      smoothLandmarks: true,\n      enableSegmentation: true,\n      smoothSegmentation: true,\n      minDetectionConfidence: 0.5,\n      minTrackingConfidence: 0.5,\n    });\n  \n    pose.onResults(onResults);\n  \n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      navigator.mediaDevices\n        .getUserMedia({ video: videoConstraints })\n        .then((stream) => {\n          videoElement.current.srcObject = stream;\n          videoElement.current.onloadedmetadata = () => {\n            const camera = new Camera(videoElement.current, {\n              onFrame: async () => {\n                await pose.send({ image: videoElement.current });\n              },\n              width: videoConstraints.width,\n              height: videoConstraints.height,\n            });\n            camera.start();\n          };\n        })\n        .catch((err) => {\n          console.error(\"Failed to get user media\", err);\n        });\n    }\n  \n    // Cleanup function\n    return () => {\n      pose.close();\n    };\n  }, []);\n  \n\n  function onResults(results) {\n    const canvasCtx = canvasElement.current.getContext(\"2d\");\n    canvasCtx.save();\n    canvasCtx.clearRect(\n      0,\n      0,\n      canvasElement.current.width,\n      canvasElement.current.height\n    );\n    canvasCtx.drawImage(\n      results.image,\n      0,\n      0,\n      canvasElement.current.width,\n      canvasElement.current.height\n    );\n    drawConnectors(\n      canvasCtx,\n      results.poseLandmarks,\n      POSE_CONNECTIONS,\n      { color: \"#00FF00\", lineWidth: 2 }\n    );\n    drawLandmarks(\n      canvasCtx,\n      results.poseLandmarks,\n      { color: \"#FF0000\", lineWidth: 1, radius: 3 }\n    );\n    \n    if (results.poseLandmarks) {\n      const leftShoulder = results.poseLandmarks[11]; // 左肩\n      const rightShoulder = results.poseLandmarks[12]; // 右肩\n      const leftElbow = results.poseLandmarks[13]; // 左肘\n      const rightElbow = results.poseLandmarks[14]; // 右肘\n      const leftWrist = results.poseLandmarks[15]; // 左手首\n      const rightWrist = results.poseLandmarks[16]; // 右手首\n    \n      // 左右それぞれの肩、肘、手首間の角度を計算\n      const angleLeft = calculateAngle(leftShoulder, leftElbow, leftWrist);\n      const angleRight = calculateAngle(rightShoulder, rightElbow, rightWrist);\n    \n      // 左手のアームカール動作を検出\n      if (angleLeft > 160) {\n        isCurling.current.left = \"down\";\n      }\n      if (angleLeft < 30 && isCurling.current.left === 'down') {\n        isCurling.current.left = \"up\";\n      }\n    \n      // 右手のアームカール動作を検出\n      if (angleRight > 160) {\n        isCurling.current.right = \"down\";\n      }\n      if (angleRight < 30 && isCurling.current.right === 'down') {\n        isCurling.current.right = \"up\";\n      }\n    \n      // 左右同時にアームカール動作をしている場合、カウントアップ\n      if (isCurling.current.left === \"up\" && isCurling.current.right === \"up\") {\n        setCount((count) => count + 1);\n        // カウントアップ後、左右のステージをリセット\n        isCurling.current.left = false;\n        isCurling.current.right = false;\n      }\n    }\n    \n    canvasCtx.restore();\n  }\n\n  // 角度計算の関数（肩、肘、手首の順につながるベクトル間の角度を計算）\n  function calculateAngle(a, b, c) {\n    const aToB = Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n    const bToC = Math.sqrt(Math.pow(b.x - c.x, 2) + Math.pow(b.y - c.y, 2));\n    const aToC = Math.sqrt(Math.pow(c.x - a.x, 2) + Math.pow(c.y - a.y, 2));\n    return Math.acos((aToB * aToB + bToC * bToC - aToC * aToC) / (2 * aToB * bToC)) * (180 / Math.PI);\n  }\n\n\n\n    return (\n      <div className=\"App\" style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"100vh\", lexDirection: 'column' }}>\n        <header className=\"App-header\">\n          <video\n            ref={videoElement}\n            style={{\n              display: \"none\" // 動画を非表示にする\n            }}\n          />\n          <canvas\n            ref={canvasElement}\n            style={{\n              // position: \"relative\",\n              // marginLeft: \"auto\",\n              // marginRight: \"auto\",\n              // left: 0,\n              // right: 0,\n              top: \"80%\",\n              // transform: \"translateY(-50%)\",\n              // textAlign: \"center\",\n              // zIndex: 9,\n              width: videoConstraints.width,\n              height: videoConstraints.height,\n            }}\n          />\n          <h1 style={{ zIndex: 10, position: 'absolute', color: '#000' }}>アームカールの回数： {count}</h1>\n        </header>\n      </div>\n    );\n\n  }\n  \n  export default App;\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}